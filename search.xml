<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>牛客补题</title>
      <link href="/myblog/2022/08/12/A%20Villages%20Landlines/"/>
      <url>/myblog/2022/08/12/A%20Villages%20Landlines/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="A-Villages-Landlines"><a href="#A-Villages-Landlines" class="headerlink" title="A Villages: Landlines"></a>A Villages: Landlines</h1><h2 id="链接："><a href="#链接：" class="headerlink" title="链接："></a>链接：</h2><p>(<a href="https://ac.nowcoder.com/acm/contest/33186/A">https://ac.nowcoder.com/acm/contest/33186/A</a>)</p><h2 id="题意描述："><a href="#题意描述：" class="headerlink" title="题意描述："></a>题意描述：</h2><p>大概就是在数轴上给出若干个点，以及每个点的半径，如果两个点的半径之和大于两个点之间的距离，则无需额外花费电线连接，否则则需要|距离-半径之和|的电线才能连接。</p><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>记录每个点的左端点以及右端点，这题就变成了典型的区间合并问题，只需要从左到右（右到左也行）遍历一遍，维护一个当前合并区间的右端点end，如果遍历的当前节点的左端点l大于已合并区间的右端点，说明还需要|l-end|的电线才能连接，小于的话则说明无需额外的电线便能连接。</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">vector&lt;pii&gt; q;</span><br><span class="line">q.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">ll a,r;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld&quot;</span>,&amp;a,&amp;r);</span><br><span class="line">q.<span class="built_in">push_back</span>(&#123;a-r,a+r&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(q.<span class="built_in">begin</span>(),q.<span class="built_in">end</span>());</span><br><span class="line">ll sum=<span class="number">0</span>;</span><br><span class="line">    ll end=q[<span class="number">0</span>].y;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;q.<span class="built_in">size</span>();i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(end&lt;q[i].x)</span><br><span class="line">&#123;</span><br><span class="line">sum+=(q[i].x-end);</span><br><span class="line">&#125;</span><br><span class="line">        end=<span class="built_in">max</span>(end,q[i].y);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;sum&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="G-Lexicographical-Maximum"><a href="#G-Lexicographical-Maximum" class="headerlink" title="G Lexicographical Maximum"></a>G Lexicographical Maximum</h1><h2 id="链接：-1"><a href="#链接：-1" class="headerlink" title="链接："></a>链接：</h2><p>(<a href="https://ac.nowcoder.com/acm/contest/33186/G">https://ac.nowcoder.com/acm/contest/33186/G</a>)</p><h2 id="题意描述：-1"><a href="#题意描述：-1" class="headerlink" title="题意描述："></a>题意描述：</h2><p>给你一段由数字组成的字符串s，要你找到1-s之间字典序最大的数。</p><h2 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h2><p>按字典序来说，最大的是9，先考虑特殊情况(当字符串长度为1时)，这时候直接输出字符串就行了，再考虑一般情况，先判断当前位是不是9，如果是9就继续向下遍历，如果不是9，那么我们就需要降一位来使得我们可以输出9，然后之后由于已经降位了，就全部输出9就行了。还有一个特殊的地方，就是前面全是9，最后一位不是9，这种情况输出原串就行了，因为最后一位不是9的话，它的字典序也比降一位后的全是9要大。</p><h2 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string s;</span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line"><span class="keyword">if</span>(s.<span class="built_in">length</span>()==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;s;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="type">int</span> flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">length</span>();i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">cout&lt;&lt;<span class="string">&#x27;9&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(flag==<span class="number">0</span>&amp;&amp;i!=s.<span class="built_in">length</span>()<span class="number">-1</span>)</span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(flag==<span class="number">1</span>)</span><br><span class="line">cout&lt;&lt;<span class="string">&#x27;9&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(i==s.<span class="built_in">length</span>()<span class="number">-1</span>)</span><br><span class="line">cout&lt;&lt;s[i];</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 牛客 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/myblog/2022/08/11/hello-world/"/>
      <url>/myblog/2022/08/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
